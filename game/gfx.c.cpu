void
_gfx_fillRect(volatile uint8* fb, uint16 x, uint16 y, uint16 w, uint16 h, uint16 color)
{
  uint8 bitPatterns[] = { 0xff, 0x7f, 0x3f, 0x1f, 0xf, 0x7, 0x3, 0x1};
  uint8 endBitPatterns[] = { 0xff, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff};
  uint8 startMask = bitPatterns[x & 0x7];
  uint8 endMask = endBitPatterns[(x+w) & 0x7];
  uint8 mask = 0xff;
  uint16 widthBytes = w/8;
  uint16 xBytes = x/8;

  if (!color) {
    startMask = ~startMask;
    endMask = ~endMask;
    mask = 0;
  }
  
  fb += y * (SCREEN_WIDTH_BYTES);
  fb += (xBytes);

  if (color) {
    for (int y = 0; y < h; y++) {
      for (int x = 0; x < widthBytes; x++) {
	if (x == 0) {
	  *fb++ |= startMask;
	} else if (x+1 == widthBytes) {
	  *fb++ |= endMask;
	} else {
	  *fb++ = mask;
	}
      }
      fb += (SCREEN_WIDTH_BYTES-widthBytes);
    } 
  } else {
    for (int y = 0; y < h; y++) {
      for (int x = 0; x < widthBytes; x++) {
	if (x == 0) {
	  *fb++ &= startMask;
	} else if (x+1 == widthBytes) {
	  *fb++ &= endMask;
	} else {
	  *fb++ = mask;
	}
      }
      fb += (SCREEN_WIDTH_BYTES-widthBytes);
    } 
  }

}

void
_gfx_bitBlt(volatile uint8* dest, int16 sx, int16 sy, int16 dx, int16 dy, int16 w, int16 h, volatile uint8* source)
{
  static uint8 bitPatterns[] = { 0xff, 0x7f, 0x3f, 0x1f, 0xf, 0x7, 0x3, 0x1};
  static uint8 endBitPatterns[] = { 0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff};
  uint8 startMask = bitPatterns[dx & 0x7];
  volatile uint8 endMask = endBitPatterns[(dx+w) & 0x7];
  volatile uint16 widthBytes = ((dx+w)/8)-(dx/8)+1;
  int16 shift = (dx&0x7)-(sx&0x7);

  dest += (dy * SCREEN_WIDTH_BYTES) + dx/8;;
  source += (sy * SCREEN_WIDTH_BYTES) + sx/8;

  for (volatile uint16 y = 0; y < h; y++) {
    for (volatile uint16 x = 0; x < widthBytes; x++) {
      volatile uint8 byte;
      if (shift > 0) {
	byte = (*(uint8*)(source)>>(shift)|*((uint8*)(source)-1)<<(8-(shift)));
      } else if (shift < 0) {
	byte = (*(uint8*)(source)<<(-shift)|*((uint8*)(source)+1)>>(8-(-shift)));
      } else {
	byte = *source;
      }

      if (x == 0) {
	*dest = (*dest & ~startMask) | (byte & startMask);
      } else if (x == widthBytes-1) {
	*dest = (*dest & ~endMask) | (byte & endMask);
      } else {
	*dest = byte;
      }

      dest++;
      source++;
    }
    dest += SCREEN_WIDTH_BYTES-widthBytes;
    source += SCREEN_WIDTH_BYTES-widthBytes;
  }
}
